## Ejercicio 1 ✧˖°

1. Representación de datos en una computadora  

Los computadores representan los datos a través de un sistema binario, es decir, utilizando combinaciones de ceros y unos. Cuando se ingresa información, como números, letras o imágenes, esta se convierte en señales eléctricas que corresponden a estados de encendido (1) y apagado (0). Luego, los números se almacenan en formato binario, las letras se codifican con estándares como ASCII o Unicode, y las imágenes se representan mediante mapas de bits, donde cada píxel tiene un valor asociado a su color. Todo esto es procesado por la unidad central de procesamiento (CPU) y almacenado en la memoria o en discos duros para su uso posterior.  

2. Número de estados diferentes representados por N variables binarias  

El número de estados diferentes que pueden representarse con **N** variables binarias se calcula mediante la fórmula:  

\[
Estados = 2^N
\]

Esto significa que **1** bit se puede representar con **2** estados (0 y 1),  **2** bits se puede representar con **4** estados (00, 01, 10, 11), **3** bits podemse puede representar con **8** estados, y así sucesivamente. Cada bit adicional duplica la cantidad de estados posibles.  

Por ejemplo:  
- 4 bits → \(2^4 = 16\) estados  
- 8 bits → \(2^8 = 256\) estados  
- 16 bits → \(2^{16} = 65,536\) estados  


3. Unidades de almacenamiento en computación  

| **Unidad**   | **Abreviación** | **Equivalencia** |
|-------------|---------------|----------------|
| Bit         | `b`           | 1 bit |
| Byte        | `B`           | 8 bits |
| KiloByte    | `KB`          | 1,024 Bytes |
| MegaByte    | `MB`          | 1,024 KB |
| GigaByte    | `GB`          | 1,024 MB |
| TeraByte    | `TB`          | 1,024 GB |
| PetaByte    | `PB`          | 1,024 TB |
| ExaByte     | `EB`          | 1,024 PB |
| ZettaByte   | `ZB`          | 1,024 EB |
| YottaByte   | `YB`          | 1,024 ZB |

 4. Importancia del trabajo de George Boole  

George Boole fue un matemático británico que desarrolló el **Álgebra de Boole** (la base matemática de los sistemas digitales modernos). Su trabajo permitió la creación de circuitos lógicos y sistemas de computación que usan operaciones booleanas como AND, OR y NOT, y gracias a sus contribuciones, los computadores pueden procesar información en términos de valores binarios, facilitando el desarrollo de la informática y la tecnología digital.  

## Ejercicio 2 ✧˖°

| Posición     | 8   | 7   | 6   | 5   | 4   | 3   | 2   | 1   | 0   |
|-------------|-----|-----|-----|-----|-----|-----|-----|-----|-----|
| Equivalencia| 256 | 128 | 64  | 32  | 16  | 8   | 4   | 2   | 1   |
| **Número binario: 1010101010₂** |
| Binario     | 1   | 0   | 1   | 0   | 1   | 0   | 1   | 0   | 1   | 0   |
| Decimal     | 512 | 0   | 128 | 0   | 32  | 0   | 8   | 0   | 2   | 0   |
| **Resultado**: 682₁₀ |

---

| Posición     | 4   | 3   | 2   | 1   | 0   |
|-------------|-----|-----|-----|-----|-----|
| Equivalencia| 16  | 8   | 4   | 2   | 1   |
| **Número binario: 11111₂** |
| Binario     | 1   | 1   | 1   | 1   | 1   |
| Decimal     | 16  | 8   | 4   | 2   | 1   |
| **Resultado**: 31₁₀ |

---

| Posición     | 7   | 6   | 5   | 4   | 3   | 2   | 1   | 0   |
|-------------|-----|-----|-----|-----|-----|-----|-----|-----|
| Equivalencia| 128 | 64  | 32  | 16  | 8   | 4   | 2   | 1   |
| **Número binario: 10000000₂** |
| Binario     | 1   | 0   | 0   | 0   | 0   | 0   | 0   | 0   |
| Decimal     | 128 | 0   | 0   | 0   | 0   | 0   | 0   | 0   |
| **Resultado**: 128₁₀ |

---

| Posición     | 8   | 7   | 6   | 5   | 4   | 3   | 2   | 1   | 0   |
|-------------|-----|-----|-----|-----|-----|-----|-----|-----|-----|
| Equivalencia| 256 | 128 | 64  | 32  | 16  | 8   | 4   | 2   | 1   |
| **Número binario: 100100100₂** |
| Binario     | 1   | 0   | 0   | 1   | 0   | 0   | 1   | 0   | 0   |
| Decimal     | 256 | 0   | 0   | 32  | 0   | 0   | 4   | 0   | 0   |
| **Resultado**: 292₁₀ |

---

| Posición     | 5   | 4   | 3   | 2   | 1   | 0   |
|-------------|-----|-----|-----|-----|-----|-----|
| Equivalencia| 32  | 16  | 8   | 4   | 2   | 1   |
| **Número binario: 111000₂** |
| Binario     | 1   | 1   | 1   | 0   | 0   | 0   |
| Decimal     | 32  | 16  | 8   | 0   | 0   | 0   |
| **Resultado**: 56₁₀ |


## Ejercicio 3 y 4 ✧˖°

| **Nombre del tipo**        | **Abreviación (si existe)** | **Lenguaje**     | **Tamaño (bytes)** | **Rango** |
|---------------------------|----------------------------|----------------|----------------|-----------------------------|
| Entero                   | `int`                      | C, Java        | 4              | -2,147,483,648 a 2,147,483,647 |
| Entero corto             | `short`                    | C, Java        | 2              | -32,768 a 32,767 |
| Entero largo             | `long`                     | C, Java        | 8              | -9,223,372,036,854,775,808 a 9,223,372,036,854,775,807 |
| Entero sin signo         | `unsigned int`             | C              | 4              | 0 a 4,294,967,295 |
| Entero grande            | `long long`                | C              | 8              | -9,223,372,036,854,775,808 a 9,223,372,036,854,775,807 |
| Número decimal           | `float`                    | C, Java        | 4              | Aproximadamente ±3.4 × 10³⁸ (6-7 dígitos de precisión) |
| Número decimal doble     | `double`                   | C, Java        | 8              | Aproximadamente ±1.8 × 10³⁰⁸ (15-16 dígitos de precisión) |
| Número decimal extendido | `long double`              | C              | 10, 12 o 16 (según compilador) | Mayor precisión que `double` |
| Número decimal           | No tiene abreviación       | Python         | 24+ (dinámico) | Precisión arbitraria, depende del hardware |
| Número decimal           | `number`                   | JavaScript     | 8              | IEEE 754 de doble precisión |
| Número decimal preciso   | `BigDecimal`               | Java           | Variable       | Precisión arbitraria, según asignación de memoria |
| Entero grande            | `BigInt`                   | JavaScript     | Variable       | Precisión arbitraria |
| Carácter                 | `char`                     | C, Java        | 1 (C), 2 (Java) | En C almacena un solo byte; en Java, soporta Unicode (2 bytes) |
| Cadena de texto          | `string`                   | Java, JavaScript | Variable       | Depende de la longitud de la cadena |
| Cadena de texto          | `char[]`                   | C              | Variable       | Depende de la longitud de la cadena más `\0` |
| Cadena de texto          | `str`                      | Python         | Variable       | Depende de la longitud de la cadena |
| Booleano                 | `bool`                     | C, Java, Python, JavaScript | 1 (C), 1 (Java), 28 (Python), 4 (JavaScript) | `true` o `false` (`0` o `1` en C) |
| Valor vacío              | `void`                     | C, Java        | No aplica      | Indica ausencia de valor |
| Valor indefinido         | `undefined`                | JavaScript     | No aplica      | Variable no inicializada |
| Valor nulo               | `null`                     | Java, JavaScript | No aplica      | Indica ausencia de un objeto |
| Cualquier tipo           | `Object`                   | Java, JavaScript | Variable       | Puede almacenar cualquier tipo de objeto |
| Cualquier tipo           | `any`                      | TypeScript     | Variable       | Puede representar cualquier tipo de dato |
| Lista/Matriz             | `Array`                    | Java, JavaScript, Python | Variable       | Depende de la cantidad de elementos |
| Lista                    | `list`                     | Python         | Variable       | Colección mutable de elementos |
| Conjunto                 | `set`                      | Python, Java   | Variable       | Colección de valores únicos |
| Diccionario              | `dict`                     | Python         | Variable       | Colección de pares clave-valor |
| Mapa                     | `Map`                      | JavaScript, Java | Variable       | Colección ordenada de claves y valores |
| Tupla                    | `tuple`                    | Python         | Variable       | Similar a `list`, pero inmutable |
| Elemento HTML            | `HTMLElement`              | JavaScript     | Variable       | Representa un elemento HTML en el DOM |


[Link de donde se obtuvo la información](https://chatgpt.com/c/67a60a1e-5bd0-800a-b626-840b837766f9)

## Ejercicio 5 ✧˖°


Cálculo del Espacio Ocupado por Cada Tipo de Dato


| Tipo de Dato            | Tamaño por Registro | Número de Registros | Espacio Total (bytes) |
|-------------------------|--------------------|---------------------|----------------------|
| **Identificador numérico (int)** | 4 bytes | 8,640 | 34,560 bytes |
| **Temperatura (float)** | 4 bytes | 8,640 | 34,560 bytes |
| **Valor lógico (bool)** | 1 byte  | 8,640 | 8,640 bytes  |
| **Texto (10 caracteres)** | 10 bytes | 8,640 | 86,400 bytes |

( Cada número se multiplica respectivamente por 8,640 que es el equivalente de la división de 
10 segundos por registro / 86,400 segundos = 8,640 registros )
